	.TITLE CBRKOT - COCKTAIL VERSION OF SUPER BREAKOUT
	.RADIX 16
	.ASECT
	.LIST CND
;
;PROGRGAMMER: ED LOGG
;
;CHECKER:
;
;DATE INITIATED: APRIL 1,1978
;
;CHARGE NUMBER: 
;
;DISK NUMBER: 12 (BACKUP: B26)
;
;HARDWARE: MODIFIED DIRT BIKE
;
;
;MEMORY REQUIREMENTS:
;	PROGRAM: 2C00-3FFF (5K)
;	VIDEO RAM: 400-77F
;	MOTION OBJECT RAM: 10-1F (3 OBJECTS)
;	ZERO PAGE RAM: 0-7F
;	VIDEO RAM ORIGIN: LOWER LEFT CORNER
;	MOTION OBJECT ORIGIN: UPPER RIGHT CORNER
;
;
;INTERRUPT REQUIREMENTS: NMI (POTS),IRQ(8/FRAME)
;
;PROGRAM DESCRIPTION: CBRKOT-ONE OR TWO PLAYER
;		      VARIATIONS OF THE GAME SUPER
;		      BREAKOUT IN A COCKTAIL CABINET.
;		      SOME GAMES USE MULTIPLE BALLS
;		      AND SOME FEATURE DIFFERENT
;		      SCROLLING PATTERNS
;
;

	.SBTTL MEMORY MAP

PLYFLD	=0400			;PLAYFIELD
GAMESW	=0828			;GAME SELECT BIT (BIT 7)(HIGH=ON)
SVSW1	=082E			;SERVE SWITCHES (HIGH=ON) BIT 7
SVSW2	=082F			;PLAYER 2 SERVE BUTTON (HIGH=ON) BIT (BIT 7)
LANG	=0830			;LANGUAGE OPTION IN BITS 6 AND 7 (LOW=ON)
CMODE	=0831			;COIN MODE IN BITS 6 AND 7 (LOW=ON)
NBALLS	=0832			;NUMBER OF BALLS IN BIT 7, BIT 6 =THIRD BIT FOR BONUS TIME
BONUS	=0833			;BONUS IN BITS 6 AND 7 (LOW=ON)
COINS	=0840			;COIN DETECTION BITS 6 AND 7 (LOW=OFF)
PLSW	=0880			;PLAYER SWITCH (BIT 7=LOW FOR 2 PLAYERS)
				;	       (BIT 6=LOW FOR 1 PLAYER)
STSW	=08C0			;SELF-TEST SW (BIT 7=LOW IS ON)
SLAM	=08C0			;SLAM SWITCH (BIT 6=LOW IS ON)
VSYNC	=0C00			;VERTICAL SYNC COUNTER
SVLIT1  =0C10			;SERVE LIGHT FOR PLAYER 1 (ADD 1 FOR OFF)
SVLIT2	=0C20			;PLAYER 2 SERVE LITE (ADD 1 FOR OFF)
LITE1	=0C30			;ONE PLAYER START LITE (ADD 1 FOR ON)
LITE2	=0C40			;TWO   "      "     "    "  "  "    "
MASK1	=0C50			;POT1 NMI MASK (ADD 1 FOR ON)
MASK2	=0C60			;POT2 NMI MASK   "  "  "   "
COINCT	=0C70			;COIN COUNTER (ADD 1 FOR ON)
WTCHDG	=0C80			;WATCHDOG
INTACK	=0E00			;INTERRUPT ACKNOWLEDGE
VSYNC2  =1000			;D7 IS THE LSB OF POT VALUE
PROG	=2C00			;PROGRAM SPACE


;ZERO PAGE MEMORY DEFINITIONS

FRAME:	.BLKB 2			;FRAME COUNT
PLAYR:	.BLKB 1			;PLAYER NUMBER (0 TO 1)
NPLAYR:	.BLKB 1			;NUMBER OF PLAYERS (0-2) 0=ATTRACT MODE
BALL:	.BLKB 1			;BALL NUMBER (1 TO 5)
NBALL:	.BLKB 1			;NUMBER OF BALLS ACTIVE
GAME:	.BLKB 1			;GAME SELECTED (REFLECTS GAME SELECT SWITCH)
				;0=SUPER (SCROLLING) BREAKOUT
				;1=DOUBLE BREAKOUT
				;2=CAVITY BREAKOUT
				;0=CANYON BREAKOUT
				;1=VERTICAL BREAKOUT
NOISES: .BLKB 3			;NOISE GENERATION COUNTERS(LOW TO HIGH)
EXTPLY:	.BLKB 1			;SCORE NEEDED FOR EXTENDED PLAY
CNTDWN:	.BLKB 1			;ATTRACT MODE COUNTDOWN BEFORE SELF-PLAY
SCROLL: .BLKB 1    		;SCROLL COUNT
NBRICK:	.BLKB 1			;NUMBER OF BRICKS REMAINING
$CRDT:	.BLKB 1			;CREDIT IN INCREMENTS OF HALF CREDITS
CNCTR:  .BLKB 1			;COIN COUNTER COUNT TO BE INCREMENT
HPOS	=10			;HORIZONTAL POSITION (EVERY 2 LOCATIONS)
NOISE	=11			;CRASH NOISE BIT 0-3 REPRESENT DIFFERENT TONES
POLYL	=13
POLYH	=15
PADLEN  =16			;PADDLE WIDTHS(OLD & NEW)
FREPLY	=17			;NUMBER OF FREE PLAYS
VPOS	=18			;VERTICAL POSITION INTERLEAVED WITH PICTURE
PICT	=19			;PICTURE SELECTION BIT 7 ON MEANS NO BALL
				;BIT 0 ON FOR NON-DESTRUCTIVE BALL-DOES NOT DESTORY BRICKS
				;BIT 1 ON TO ALLOW BALL TO PASS THRU BRICKS
PADDLE  =1E			;PADDLE POSITION (OLD & NEW)
	.=20
SCORE1:	.BLKB 5			;DECIMAL SCORE PART 1 (LSD) AND HIGH SCORE BY GAME
SCORE2:	.BLKB 5			;DECIMAL SCORE PART 2 (MSD)
DIR:	.BLKB 6			;BALL DIRECTION (0=NORTH, 40=EAST...) EVERY 2 LOCATIONS
VEL	=DIR+1			;BALL SPEED (0 TO 7F)
HPOSL:  .BLKB 6			;HORIZ BALL POSITION (LSB) EVERY 2 LOCATIONS
VPOSL   =HPOSL+1		;VERT BALL POSITION (LSB)
BHIT:	.BLKB 1			;POSITION OF LAST BRICK HIT (ROW NUMBER)
GSW	=BHIT			;GAME SWITCH DEBOUNCE FLAG
HITS:   .BLKB 1			;NUMBER OF PADDLE HITS
TEMP1:	.BLKB 2			;TEMPORARY
TEMP2:	.BLKB 2
TEMP3:	.BLKB 2
TEMP4:	.BLKB 2
CNTINT:	.BLKB 2			;COUNT OF INITIALIZATION-NEW ROWS OF BRICKS
KOINS:	.BLKB 2			;COUNTER FOR COIN DETECTION
SLFLG:	.BLKB 2			;COUNTER FOR SLAM DETECTION
SAVSRL: .BLKB 1			;SAVE SCROLL COUNT
SAVBAL:	.BLKB 2			;SAVE BALL PICTURES
BUFFER:	.BLKB 39.		;BUFFER FOR SAVING PREVIOUS PLAYERS POSITION
ENDZP:	.BLKB 1			;LWA+1 OF ZERO PAGE USED
	.=PROG
	.SBTTL MAIN LOOP
	JMP PWRON		;FOR EASE OF USE ON DEVELOPMENT SYSTEM***TEMPORARY***
START:	LDX I,1
	LDY GAME
	LDA NPLAYR
	BEQ 26$		;IF LAST GAME WAS ATTRACT
20$:	LDA ZX,SCORE2	;CHECK FOR NEW HIGH SCORE
	CMP AY,SCORE2+2
	BCC 24$		;NOT HIGH ENOUGH
	STA AY,SCORE2+2	
	BNE 22$		;NEW HIGH SCORE
	LDA ZX,SCORE1
	CMP AY,SCORE1+2
	BCC 24$		;NOT HIGH ENOUGH
22$:	LDA ZX,SCORE1
	STA AY,SCORE1+2	;NEW HIGH SCORE
24$:	DEX
	BPL 20$		;BOTH SCORES
26$:	JSR READY		;WAIT FOR START OF GAME
	STA A,LITE1
	STA A,LITE2
1$:	INC BALL		;INCREMENT BALL NUMBER
2$:	JSR SERVE		;WAIT FOR SERVE
3$:	LDA NPLAYR
	BNE 10$			;IF NOT ATTRACT MODE
	LDA $CRDT
	BNE 26$		;IF COIN ENTERED
10$:	JSR WAIT		;UPDATE POSITIONS AND SCORES
	STA A,SVLIT1+1		;TURN OFF LED'S - BEWARE OF 9334 GLITCH
	STA A,SVLIT2+1
	JSR COLIDE		;CHECK FOR BALL COLLISIONS
	JSR NEWWAL		;CHECK FOR NEW WALL
	JSR GNOISE		;GENERATE NOISES
	LDA NBALL
	BNE 3$			;IF AT LEAST ONE BALL STILL ACTIVE
	LDA NPLAYR
	BEQ 26$		;RESTART ATTRACT MODE
	LDA I,8
	STA NOISE
	STA FRAME
12$:	JSR WAIT
	LDA A,SVSW1		;PLAYER 1 SWITCH
	LDX PLAYR
	BEQ 11$			;PLAYER 1
	LDA A,SVSW2		;PLAYER 2 SWITCH
11$:	ROL
	BCS 13$			;IF SERVE BUTTON PUSHED
	LDA FRAME		;WAIT FOR HALF SECOND
	AND I,3F
	BNE 12$
13$:	LDA I,0
	STA NOISE		;STOP ALL NOISE
	INC PLAYR		;INCREMENT PLAYER NUMBER
	LDA PLAYR
	CMP NPLAYR
	BCC 15$			;NEXT PLAYER PLEASE
	LDA I,0
	STA PLAYR		;RESET PLAYER NUMBER
15$:	JSR RESTOR		;RESTORE OTHER PLAYERS POSITION
	LDA I,MES20/100		;CLEAR BRICKS CLOSE TO PADDLE
	STA TEMP1+1
	LDA I,MES20&0FF
	STA TEMP1
	LDX I,6			;STARTING ROW NUMBER
	LDA I,0
	LDY PLAYR
	BEQ 5$			;IF PLAYER 0
	LDX I,1F		;CLEAR THESE ROWS FOR PLAYER 2
	LDA I,19
5$:	STA TEMP4		;ENDING ROW NUMBER
	JSR ROSET2		;BLANK FIRST 6 ROWS
	LDA PLAYR
	BNE 2$			;IF NOT BACK TO PLAYER 1
	LDA I,4
	BIT A,NBALLS
	BPL 14$			;IF 5 BALL GAME
	LDA I,2			;3 BALL GAME
14$:	CMP BALL
	BCS 1$			;SERVE NEXT BALL
	JMP START


	.SBTTL ADD TO SCORE FOR HITTING BRICKS
;ADDSCR-ADD TO SCORE
;
;ENTRY (X) = BALL NUMBER (0,2 OR 4)
;USES (TEMP1,TEMP1+1),TEMP4
ADDSCR: JSR POS			;GET PLAYFIELD POSITION
	LDA TEMP1
	AND I,01F		;GET POSITION IN ROW (0 TO 1E)
	LDY PLAYR
	BEQ 30$			;IF PLAYER
	EOR I,1F		;INVERT ROW NUMBERS
30$:	SEC
	SBC I,0F		;0 TO F
	BPL 2$			;IF NO UNDERFLOW
	LDA I,0
2$:	LSR			;0 TO 7
	STA TEMP1
	LDA GAME		;8*GAME+ROW
	ASL
	ASL
	ASL
	ORA TEMP1
	TAY
	LDA I,77$/100
	STA TEMP1+1
	LDA I,77$&0FF
	STA TEMP1
	LDA NY,TEMP1		;GET SCORE VALUE AND FLAGS
	BPL 4$			;IF NO SPEED INCREASE
	LDA ZX,DIR
	BPL 1$			;IF GOING UP
	JSR RFLTNS		;CHANGE DIRECTION TO UP
1$:	CMP I,40
	LDA A,ANGLE+2
	BCC 3$			;IF GOING RIGHT TO LEFT
	LDA A,ANGLE+3
3$:	STA TEMP2
	LDA ZX,DIR
	CMP I,80
	LDA TEMP2
	BCC 6$			;IF GOING UP
	JSR RFLTNS		;CHANGE DIRECTION
6$:	STA ZX,DIR		;CHANGE DIRECTION TOO
	LDA I,09
	STA ZX,VEL
4$:	LDA NPLAYR
	BEQ 10$			;IF IN ATTRACT MODE
	LDA NY,TEMP1
	AND I,7F		;CLEAR FLAG IF ANY
	STA TEMP1
	CLC
	ADC NOISES+2		;ADD TO NOISE COUNTER TOO
	CMP I,20
	BCC 5$		;IF NOT TOO MANY
	LDA I,20
5$:	STA NOISES+2
	SED
	LDA TEMP1
	CLC
	LDY NBALL
	DEY
	BEQ 8$			;ONLY 1 BALL ACTIVE
	ADC TEMP1		;DOUBLE SCORE
	DEY
	BEQ 8$			;ONLY 2 BALL ACTIVE
	ADC TEMP1		;TRIPLE SCORE
8$:	LDY PLAYR
	ADC AY,SCORE1
	STA AY,SCORE1
	BCC 20$			;NO CARRY
	LDA I,0
	ADC AY,SCORE2
	STA AY,SCORE2
	CMP EXTPLY
	BNE 20$			;NOT THE RIGHT SCORE
	LDA PLAYR		;0 OR 1
	CLC
	ADC I,01		;1 OR 2
	TAY
	ASL
	ASL
	AND FREPLY
	BNE 20$			;ALREADY ON FREE GAME
	TYA
	ORA FREPLY
	STA FREPLY		;MARK WHO GOT FREE PLAY
	LDA I,10
	STA NOISES		;EXTENDED PLAY SOUNDS
	STA NOISES+1
	INC $CRDT
	INC $CRDT		;ADD FREE GAME
20$:	CLD
10$:	DEC NBRICK
	RTS

77$:	.BYTE 1,1,3,3,85,85,87,87	;SUPER BREAKOUT
	.BYTE 0,0,1,3,85,87,0,0	;SCORING TABLE ARRANGED BY GAME
	.BYTE 0,0,1,3,85,87,0,0	;BIT 7=INCREASE BALL SPEED

	.SBTTL BLANK SCREEN AND ADD BORDERS
BLANK:	LDA I,0
	STA TEMP4
	LDX I,1E
	LDA I,MES20/100
	STA TEMP1+1
	LDA I,MES20&0FF
	STA TEMP1		;SOURCE ADDRESS
	JSR ROSET2		;CLEAR SCREEN
BLANK1:	LDA PLAYR
	BNE 10$			;IF PLAYER 2 IS UP
	LDA I,MES21&0FF
	STA TEMP1		;GET NEW SOURCE ADDRESS
	LDA I,MES21/100
	STA TEMP1+1
	LDA I,1F
5$:	TAX
	STA TEMP4
	JMP ROSET2		;ADD TOP BORDER AND RETURN

10$:	LDA I,MES23&0FF		;SETUP POINTER TO ADD TOP BORDER FOR PLAYER 2
	STA TEMP1
	LDA I,MES23/100
	STA TEMP1+1
	LDA I,0
	BEQ 5$			;ALWAYS


	.SBTTL CHECK FOR GAME SELECT SWITCH
;CHKGAM - CHECK GAME SELECT SWITCH
;
;ENTRY	(GSW)=LAST 8 READINGS OF GAME SELECT SWITCH
CHKGAM:	LDA PLAYR
	BNE 1$			;IF NOT FIRST PLAYER GAME HAS STARTED
	LDA NPLAYR
	BEQ 6$			;STILL IN ATTRACT
	LDA BALL
	CMP I,01
	BNE 1$			;IF NOT FIRST BALL
6$:	LDA A,GAMESW
	ROL
	LDA GSW
	ROL
	STA GSW			;DEBOUNCE GAME SWITCH
	AND I,0F
	CMP I,03
	BNE 10$			;SWITCH NOT ON
	DEC GAME
	BPL 8$			;STILL IN RANGE
	LDA I,02
	STA GAME
8$:	LDA I,0			;RESET COUNT OF INITS
	STA CNTINT
	JMP INIT		;INITIALIZE SCREEN

10$:	LDA A,BONUS-1
	STA EXTPLY		;BIT 6=MSB OF BONUS
	LDA A,BONUS
	AND I,0C0
	ROL EXTPLY
	ROL EXTPLY
	ORA GAME
	ROL
	ROL
	ROL
	TAX
	LDA AX,CHKGAA
	STA EXTPLY		;SAVE BONUS SCORE NEEDED
	BEQ 1$			;NO EXTENDED PLAY
	LDA I,44
	JSR MESS		;DISPLAY BONUS NEEDED
	LDA EXTPLY
	LSR
	LSR
	LSR
	LSR
	BEQ 3$			;ZERO SUPPRESS DIGIT
	JSR HEX1		;CONVERT TO HEX
3$:	LDY I,0
	STA NY,TEMP2
	LDA EXTPLY
	JSR HEX1		;CONVERT TO HEX
	LDY I,20
	STA NY,TEMP2
	LDA I,0B0		;ADD TRAILING ZEROES
	LDY I,40
	STA NY,TEMP2
	LDY I,60
	STA NY,TEMP2
1$:	RTS

CHKGAA:	.BYTE 0,2,4,6,9,12,16,20
	.BYTE 0,2,4,6,8,10,12,15
	.BYTE 0,2,3,4,7,9,11,14
	
	.SBTTL CHECK FOR GAME CHANGES AT PADDLE COLLISION
;CHKHIT-CHECK FOR GAME CHANGES
;
;ENTRY (X)=BALL NUMBER (0,2 OR 4)
CHKHT1:LDA HITS
	CMP I,02
	BCS 2$			;IF NOT FIRST PADDLE HIT
	LDX I,2
	JMP SERVE1		;SERVE BALL 1

2$:	RTS

CHKHT2:	LDY PLAYR
	LDA HPOS+2
	CMP AY,90$
	BCC 1$			;IF BALL OUT OF BRICKS
	CMP AY,95$
	BCC 2$			;IF BALL IN BRICKS
1$:	LDA PICT+2
	LSR
	BCC 2$			;IF BALL IS ACTIVE
	INC NBALL		;ADD ACTIVE BALL
	CLC
	ROL
	STA PICT+2
2$:	LDA HPOS+4
	CMP AY,90$
	BCC 3$			;IF BALL OUT OF BRICKS
	CMP AY,95$
	BCC 4$			;IF BALL IN BRICKS
3$:	LDA PICT+4
	LSR
	BCC 4$			;IF BALL IS ACTIVE
	INC NBALL		;ADD ACTIVE BALL
	CLC
	ROL
	STA PICT+4
4$:	RTS
	
90$:	.BYTE 24,90		;USED TO DETERMINE IF BALL HAS ESCAPED ACTIVIES
95$:	.BYTE 60,0C8

CHKHIT:	LDA GAME
	CMP I,01
	BEQ CHKHT1		;IF GAME 1-DOUBLE BREAKOUT
	BCS CHKHT2		;IF GAME 2-CAVITY BREAKOUT
	LDA NPLAYR		;PROGRESSIVE BREAKOUT
	BNE 2$			;IF NOT IN ATTRACT
	LDA CNTDWN
	BNE 25$			;DON'T SCROLL YET
2$:	LDA VEL
	CMP I,08
	BCC 4$			;IF BALL IS SLOW
	LDA I,1C
	CMP HITS
	BCC 4$			;IF LATE IN GAME
	STA HITS		;SPEED UP GAME NOW
4$:	LDA HITS
	CMP I,07
	BCC 25$			;NO SCROLL UNTIL EIGTH HIT
	CMP I,30
	BCS 5$			;SCROLL EVERY FRAME
	CMP I,14
	BCC 6$			;NOT ENOUGH HITS
	AND I,01		;SCROLL EVERY OTHER FRAME
	BEQ 5$			;SCROLL EVERY FOURTH INT
25$:	RTS
	
6$:	AND I,03
	BNE 25$		;SCROLL EVERY FOURTH HIT
5$:	LDA I,PLYFLD+340/100
	STA TEMP1+1
	STA TEMP2+1
	LDA I,5A
	LDX I,24
	LDY PLAYR
	BEQ 3$			;IF PLAYER 1
	LDX I,3B
	LDA I,26
3$:	STA TEMP3
8$:	STX TEMP1		;SET STARTING ADDRESS
	STX TEMP2
	LDA PLAYR
	BEQ 29$			;IF PLAYER 1 IS UP
	DEC TEMP2
59$:	LDY I,0
	LDA NY,TEMP2		;MOVE BRICKS FOR PLAYER 2
	STA NY,TEMP1
	LDY I,20
	LDA NY,TEMP2
	STA NY,TEMP1
	DEC TEMP1
	DEC TEMP2
	LDA TEMP2
	AND I,1F
	BNE 59$			;NOT DONE YET
	BEQ 10$			;ALWAYS

29$:	INC TEMP2
9$:	LDY I,0
	LDA NY,TEMP2		;MOVE BRICK OR BLANK
	STA NY,TEMP1
	LDY I,20
	LDA NY,TEMP2
	STA NY,TEMP1
	INC TEMP1
	INC TEMP2
	LDA TEMP2
	AND I,1F
	CMP I,1F
	BCC 9$			;LOOP MOVING BRICKS TIL TOP OF PLAYFIELD
10$:	LDA SCROLL
	AND I,04
	BNE 12$			;MUST ADD A BRICK
	STA NY,TEMP1		;CLEAR TOP ROW
	TAY			;Y=0
	STA NY,TEMP1
	BEQ 16$
	
12$:	LDA I,0BF		;RIGHT HALF OF BRICK
	STA NY,TEMP1
	LDA I,0BE
	LDY I,0
	STA NY,TEMP1		;LEFT HALF OF BRICK
16$:	LDA TEMP1
	SEC
	SBC TEMP3
	TAX
	BCS 8$			;IF NO CARRY - NOT DONE YET
	DEC TEMP1+1
	DEC TEMP2+1
	LDA TEMP2+1
	CMP I,04
	BCS 8$			;NOT DONE UNTIL BELOW 400
	INC SCROLL
	RTS
	
	.SBTTL COIN SUBROUTINE
COIN:	LDA CNCTR		;ANY COINS?
	BNE 5$			;YES
	BIT A,CMODE		;NO, FREEPLAY?
	BVS 5$
	BMI 5$
2$:	LDA I,4
	STA $CRDT
5$:	LDA FRAME
	AND I,7
	BEQ 1$			;TIME TO CHECK COIN COUNTER
	CMP I,4	
	BNE 8$			;IF NOT TIME TO TURN IT OFF
	STA A,COINCT		;TURN OFF COIN COUNTER
8$:	RTS
	
1$:	LDA CNCTR
	BEQ 8$			;IF NO COINS
	BIT A,CMODE
	BVC 3$			;FREE PLAY OR 1 COIN 1 CREDIT
	BMI 4$			;IF 2 COINS 1 CREDIT
	INC $CRDT		;1 COIN 2 CREDITS
	INC $CRDT		;ONE ADDITIONAL PLAY
	BPL 3$
	
3$:	INC $CRDT
4$:	INC $CRDT
	DEC CNCTR
	STA A,COINCT+1		;TURN ON COIN COUNTER
	LDA $CRDT		;LIMIT CREDIT
	CMP I,1E
	BCC 8$
	LDA I,1E
	STA $CRDT
	RTS
		
	
	.SBTTL CHECK FOR BALL COLLISIONS
COLIDE:	LDX I,4
COLID1:	LDA ZX,PICT
	BPL 3$		;IF BALL ACTIVE
	JMP COLID9

3$:	LDA ZX,VPOS
	CMP I,0E8
	BCS 2$		;IF BALL COLLIDING WITH WALL
	CMP I,01A
	BCS COLID2		;IF NO WALL COLLISION
	LDA ZX,DIR
	CMP I,40
	BCC COLID2		;BALL GOING IN RIGHT DIRECTION
	CMP I,0C0
	BCS COLID2		;BALL GOING IN RIGHT DIRECTION
	BCC 5$			;OK REFLECT PATH OF BALL

2$:	LDA ZX,DIR
	CMP I,40
	BCC 5$			;BALL GOING IN WRONG DIRECTION
	CMP I,0C0
	BCC COLID2		;BALL IS GOING RIGHT DIRECTION
5$:	JSR RFLTEW		;REFLECT DIRECTION FOR RICHOCHET
	STA ZX,DIR		;NEW DIRECTION
	INC NOISES+1
COLID2:	LDY PLAYR
	BEQ 10$			;IF PLAYER 1 IS UP
	LDA ZX,HPOS
	CMP I,0EF
	BNE COLID3		;NO COLLISION WITH TOP
	LDA ZX,DIR
	BPL COLID3		;BALL ALREADY RETURNING
	BMI 20$			;ALWAYS

10$:	LDA ZX,HPOS
	BNE COLID3		;IF NO COLLISION WITH TOP
	LDA ZX,DIR
	BMI COLID3		;BALL ALREADY RETURNING
20$:	JSR RFLTNS		;HAVE BALL BOUCE BACK
	STA ZX,DIR		;NEW DIRECTION
	LDA I,23
	STA BHIT		;ALLOW HITTING ON WAY DOWN
	LDA ZX,PICT
	AND I,01
	BEQ 4$			;IF ACTIVE BALL
	INC NBALL		;INCREASE COUNT OF BALLS
4$:	LDA ZX,PICT
	AND I,80
	STA ZX,PICT	;CLEAR BALL OPTIONS
	LDA NPLAYR
	BEQ COLID3			;IF IN ATTRACT MODE
	LDA I,8
	STA PADLEN		;REDUCE PADDLE SIZE
COLID3:	LDA ZX,HPOS
	CMP I,0F0
	BCC COLID4		;IF BALL NOT OFF SCREEN
	LDA ZX,PICT	
	AND I,01
	BNE 2$			;IF BALL WAS NOT ACTIVE
	DEC NBALL	;DECREASE NUMBER OF ACTIVE BALLS
2$:	LDA I,80
	STA ZX,PICT	;MAKE BALL INACTIVE
	LDA GAME
	CMP I,02
	BNE COLID4	;IF NOT CAVITY BREAKOUT
	JSR CHKHIT	;CHECK FOR OTHER BALLS
COLID4:	LDA ZX,PICT
	AND I,02
	BNE 18$		;BALL GOES THRU BRICKS
	JSR POS		;GET PLAYFIELD POSITION OF BALL
	LDY I,0
	LDA NY,TEMP1	;GET PLAYFIELD OBJECT
	CMP I,0BE
	BEQ 10$		;IF LEFT HALF OF BRICKS
	CMP I,0BF
	BNE 18$		;IF NO BRICKS COLLISION
	LDA TEMP1	;HIT RIGHT HALF OF BRICKS
	SEC		;ADJUST POINTER TO RIGHT HALF OF BRICKS
	SBC I,20
	STA TEMP1
	BCS 10$		;IF NO CARRY
	DEC TEMP1+1
10$:	LDA ZX,PICT
	AND I,01
	BNE 12$		;DO NOT DESTROY BRICKS
	LDA GAME
	BEQ 11$		;IF SCROLLING BREAKOUT
	LDA ZX,PICT
	ORA I,02
	STA ZX,PICT	;MAKE BALL PASS THRU BRICKS
	BNE 14$

11$:	LDA TEMP1
	AND I,1F
	SEC
	SBC BHIT
	JSR ABS
	CMP I,04		;MUST BE AT LEAST 4 ROWS AWAY FROM LAST HIT
	BCC 18$			;PASS THRU BRICK
14$:	LDA TEMP1
	AND I,1F
	STA BHIT		;SAVE POSITION OF HIT BALL
	LDA NPLAYR
	BNE 15$			;IF NOT ATTRACT MODE
	LDA CNTDWN
	BNE 12$			;IF WE ARE NOT IN SELF-PLAY MODE
15$:	LDY I,0
	LDA I,00	;REMOVE BRICK
	STA NY,TEMP1
	LDY I,20
	STA NY,TEMP1
	JSR ADDSCR		;ADD HIT TO SCORE
12$:	JSR DEFLCT		;DEFLECT BALL
18$:	STX TEMP4+1
	JSR PADHIT 	;CHECK FOR PADDLE HIT
	LDX TEMP4+1
COLID9:	DEX
	DEX
	BMI 22$		;LOOP FOR 3 BALLS
	JMP COLID1

22$:	RTS

	.SBTTL BALL DEFLECTION OFF OF BRICKS
DEFLCT:	LDA GAME
	CMP I,01
	BEQ 2$			;IF DOUBLE BREAKOUT
	BCS 1$			;IF CAVITY BREAKOUT
	LDA BHIT		;CHECK TO PREVENT BALL FROM EATING TOP SECTION OF BRICKS
	CMP I,1E
	BNE 2$			;NOT TOP ROW OF BRICKS
	LDA ZX,DIR
	BMI 20$			;DON'T CHANGE DIRECTION
2$:	JMP 7$

20$:	RTS

1$:	LDA ZX,PICT
	AND I,01
	BEQ 2$		;HIT SIDE OF BRICK IF BALL IS MON-DESTRUCTIVE
	LDA ZX,VPOS
	AND I,0F
	CMP I,06
	BCC 6$		;MUST BE HORIZONTAL
	CMP I,0C
	BCS 6$		;MUST BE HORIZONTAL DEFLECTION
	LDY I,0
	LDA ZX,HPOS
	AND I,07
	CMP I,04
	LDA ZX,DIR
	BCS 3$		;IF ON LOWER HALF OF BRICKS
	JSR RFLTNS	;CHANGE ALL ANGLES TO REVERSE PERSPECTIVE
	LDY I,2
3$:	PHA
	LDA ZX,VPOS
	AND I,0F
	CMP I,09
	BCC 4$		;IF LEFT CORNER OF BRICK
	PLA
	JSR RFLTEW	;CHANGE PERSPECTIVE TO LOWER LEFT CORNER
	PHA
	TYA
	ORA I,60
	TAY
4$:	JSR POS		;GET PLAYFIELD POSITION
	LDA TEMP1	;GET PLAYFIELD POSITION DIAGONALLY
	SEC		;OPPOSITE LOWER LEFT CORNER OF BRICK
	SBC I,21
	STA TEMP1
	BCS 5$
	DEC TEMP1+1
5$:	LDA NY,TEMP1
	AND I,1F
	BNE 16$		;IF A BRICK OR EDGE OF PLAYFIELD
	PLA
	BMI 10$		;DEFLECT IT VERTICALLY
	CMP I,40
	BCC 7$			;TRY HORIZONTAL DEFLECTION
	STY TEMP2		;GOING STRAIGHT INTO CORNER
	TYA
	AND I,60		;0 OR 60
	ORA I,01		;1 OR 61
	TAY
	LDA NY,TEMP1
	AND I,1F
	BEQ 10$			;IF A BRICK IS NOT THERE USE VERTICAL
	LDA TEMP2
	AND I,02
	ORA I,20
	TAY
	LDA NY,TEMP1		;GET POSITION BELOW/ABOVE BRICK
	AND I,1F
	BNE 17$			;IF A BRICK IN BOTH PLACES COME STRAIGHT OUT
6$:	LDA GAME
	CMP I,02
	BNE 7$			;IF NOT CAVITY BREAKOUT
	LDA ZX,HPOS
	AND I,07
	CMP I,04
	BCC 12$			;IF ON TOP OF BRICK
	LDA ZX,DIR
	CMP I,80
	BCS 9$		;BALL ALREADY GOING IN RIGHT DIRECTION
7$:	LDA ZX,DIR	;HORIZONTAL DEFLECTION
	JSR RFLTNS
	STA ZX,DIR
9$:	RTS
	
12$:	LDA ZX,DIR
	CMP I,80
	BCC 9$		;BALL ALREADY GOING IN RIGHT DIRECTION
	BCS 7$		;DEFLECT BALL
	
10$:	LDA ZX,DIR
	JSR RFLTEW	;VERTICAL DEFLECTION
	STA ZX,DIR
	RTS

16$:	PLA
17$:	LDA ZX,DIR
	CLC
	ADC I,80
	STA ZX,DIR
	RTS
	
	
	.SBTTL DISPLAY GAME PRICE
;DISPRC - DISPLAY GAME PRICE AND HIGH SCORE
;
;THIS ROUTINE ASSUMES THAT THE GAME PRICE MESSAGE IS LONGER THAN THE
;HIGH SCORE MESSAGE.
;
DISPRC: LDA NPLAYR
	BNE 3$    		;IF ALREADY IN PLAY
	LDA FRAME
	AND I,3F
	BNE 3$			;WRITE ONLY ONCE
	LDA FRAME
	AND I,40
	BEQ 10$			;TIME FOR HIGH SCORE
	LDA $CRDT
	CMP I,04
	BCS 10$			;ENOUGH FOR 2 PLAYERS
	LDA A,CMODE
	AND I,0C0
	BEQ 10$			;IF FREE PLAY
	ASL
	ROL
	ROL
	ORA I,40
	JSR MESS		;DISPLAY GAME PRICE
3$:	RTS
	
10$:	LDA I,0C1		;LONGEST MESSAGE
	JSR MESS		;CLEAR GAME PRICE
	LDX GAME
	LDA ZX,SCORE2+2
	ORA ZX,SCORE1+2
	BEQ 3$			;NO HIGH SCORE
	LDA I,40
	JSR MESS		;DISPLAY HIGH SCORE MESS
	LDA TEMP2
	STA TEMP1
	LDA TEMP2+1
	STA TEMP1+1
	LDY I,0B0
	LDX GAME
	INX
	INX
	JMP SCOR0

	.SBTTL GET NEW BALL POSITIONS
;GETPOS-GET NEW BALL POSITIONS
GETPOS:	LDX I,4
	LDA NBALL
	BEQ 12$			;IF NO ACTIVE BALLS DON'T MOVE CAVITY BALLS
10$:	LDA ZX,PICT
	BMI 8$			;IF BALL NOT ACTIVE
	LDA ZX,VEL
	STA TEMP1		;SAVE MULTIPLIER
	LDA ZX,DIR
	PHA
	STX TEMP4
	JSR COS			;COS(DIR)
	EOR I,0FF		;DIFFERENT POINTS OF ORIGIN
	CLC
	ADC I,01		;-COS (DIR)
	JSR MULT		;VEL*(-COS(DIR))
	LDX TEMP4
	LDA TEMP2
	CLC
	ADC ZX,HPOSL
	STA ZX,HPOSL		;UPDATE NEW HORIZONTAL POSITION
	LDA TEMP2+1
	ADC ZX,HPOS
	CMP I,0F0
	BCC 6$			;IF NO WRAP AROUND
	LDY PLAYR
	BEQ 20$			;IF PLAYER 1 IS UP
	LDY ZX,DIR
	BPL 6$			;MISSED THE BALL
	LDA I,0EF		;HIT THE TOP
	BNE 6$			;ALWAYS

20$:	LDY ZX,DIR
	BMI 6$			;MISSED BALL
	LDA I,0			;HIT THE TOP
6$:	STA ZX,HPOS
	LDA ZX,VEL
	STA TEMP1		;SAVE MULTIPLIER
	PLA			;RESTORE DIRECTION
	STX TEMP4
	JSR SIN			;SIN(DIR)
	EOR I,0FF		;DIFFERENT POINTS OF ORIGIN
	CLC
	ADC I,01		;-SIN(DIR)
	JSR MULT		;VEL*(-SIN(DIR))
	LDX TEMP4
	LDA TEMP2
	CLC
	ADC ZX,VPOSL
	STA ZX,VPOSL		;UPDATE NEW VERTICAL POSITION
	LDA TEMP2+1
	ADC ZX,VPOS
	CMP I,0E8
	BCC 5$			;NOT OFF LEFT EDGE
	LDA I,0E8
5$:	CMP I,19
	BCS 7$			;NOT OFF RIGHT EDGE
	LDA I,19
7$:	STA ZX,VPOS
8$:	DEX
	DEX
	BPL 10$			;LOOP FOR ALL THREE BALLS
12$:	RTS
	
	
	.SBTTL GENERATE NOISE ROUTINE
GNOISE:	LDA NPLAYR
	BEQ 1$			;IF IN ATTRACT MODE NO NOISE
	LDA FRAME
	LSR
	BCC 1$			;NO CHANGE THIS FRAME
	LSR
	BCC 2$			;CHANGE OF NOISE
	LDA NOISE
	AND I,03		;NO BRICK NOISE THIS FRAME
	STA NOISE
1$:	RTS
	
2$:	LDA I,0
	LDX NOISES+2
	BEQ 4$			;NO HIGH NOISE
	DEC NOISES+2
	ORA I,4			;ADD HIGH NOISE
4$:	LDX NOISES+1
	BEQ 6$			;NO MIDDLE NOISE
	DEC NOISES+1
	ORA I,02
6$:	LDX NOISES
	BEQ 8$			;NO LOW NOISE
	DEC NOISES
	ORA I,01
8$:	STA NOISE
	RTS
	
	
	.SBTTL INITIALIZATION
INIT:	STA A,WTCHDG
	LDA I,80		;CLEAR BALLS FROM SCREEN
	STA PICT
	STA PICT+2
	STA PICT+4
	LDA I,0
	STA NOISE		;TURN OFF NOISE
	JSR BLANK		;BLANK SCREEN AND ADD BORDER
INITL:	LDX PLAYR
	INC ZX,CNTINT
	LDA GAME
	BEQ INIT0		;IF GAME 0
	CMP I,01
	BEQ INIT1		;IF GAME 1
	CMP I,02
	BEQ INIT2		;IF GAME 2
	JMP PWRON		;OOPS

INIT0:	LDA I,104.
	STA NBRICK
	LDA I,MES22/100
	STA TEMP1+1
	LDA I,MES22&0FF
	STA TEMP1
	LDY PLAYR
	LDX AY,10$		;STARTING ROW #
	LDA AY,20$		;ENDING ROW #
	STA TEMP4
	JSR ROSET2		;ADD 4 ROWS
	LDY PLAYR		;PLAYER NUMBER
	LDX AY,30$		;STARTING ROW NUMBER
	LDA AY,40$		;ENDING ROW NUMBER
	STA TEMP4
	JMP ROSET2		;ADD 4 ROWS AND RETURN

10$:	.BYTE 1E,04
20$:	.BYTE 1B,01
30$:	.BYTE 16,0C
40$:	.BYTE 13,09

INIT1:  LDA I,104.
	STA NBRICK
	JMP ROSET		;PRESET 8 ROWS OF BRICKS & RETURN

INIT2:	LDA I,96.
	STA NBRICK
	JSR ROSET		;PRESET 8 ROWS OF BRICKS
	LDA I,1		;PICTURES
	STA PICT+2
	STA PICT+4
	LDA I,MES26&0FF00/100
	STA TEMP1+1
	LDA I,MES26&0FF
	STA TEMP1
	LDY PLAYR
	LDX AY,INIT2B		;FIRST LINE TO PRESET
	LDA AY,INIT2C
	STA TEMP4		;LAST LINE TO PRESET
	JSR ROSET2		;ADD ROWS WITH CAVITIES
INIT2A:	LDA I,0D7		;ADD BALLS TO CAVITIES
	STA DIR+2
	LDA I,029		;DIRECTIONS
	STA DIR+4
	LDY PLAYR		;PLAYER NUMBER
	LDA I,058		;POSITIONS
	STA VPOS+2
	LDA I,0A0
	STA VPOS+4
	LDA AY,INIT2D
	STA HPOS+2
	STA HPOS+4
	LDA I,04		;VELOCITIES
	STA VEL+2
	STA VEL+4
	RTS

INIT2B:	.BYTE 18,08		;STARTING ROW NUMBER
INIT2C:	.BYTE 17,07		;ENDING ROW NUMBER
INIT2D:	.BYTE 3C,0BC		;HORIZ BALL POSITIONS
	
	.SBTTL MOVE COLUMNS FOR SCROLLING
;MOVCOL-MOVE COLUMNS
;
;ENTRY(Y)=0
;(TEMP1,TEMP1+1)=DESTINATION ADDRESS
;(TEMP2,TEMP2+1)=SOURCE ADDRESS
;EXIT (Y)=0
MOVCOL:	LDA NY,TEMP2	;MOVE LEFT HALF OF BRICKS
	STA NY,TEMP1
	LDA I,0		;CLEAR OLD BRICKS
	STA NY,TEMP2
	LDY I,20
	LDA NY,TEMP2
	STA NY,TEMP1
	LDA I,0
	STA NY,TEMP2
	LDY I,0
	INC TEMP1
	INC TEMP2
	LDA TEMP2
	AND I,1F
	CMP I,1F
	BNE MOVCOL	;LOOP TIL TOP OF SCREEN
	RTS
	
	
	.SBTTL CHECK FOR NEW WALL
NEWWAL:	LDA NBRICK
	BNE 30$			;IF BRICKS REMAIN
	LDA GAME
	BEQ 30$			;NOT IN SCROLLING BREAKOUT
	CMP I,02
	BNE 20$			;IF DOUBLE BREAKOUT
	LDA NBALL
	CMP I,1
	BNE 30$			;ALLOW ONLY 1 BALL ACTIVE
	LDX I,2
	LDA ZX,PICT
	BPL 2$			;IF BALL ACTIVE
	LDX I,4
	LDA ZX,PICT
	BMI 20$			;SO BALLS 1+2 ARE NOT ACTIVE
2$:	STA PICT
	LDA I,80
	STA ZX,PICT		;CHANGE ACTIVE BALL TO BALL 0
	LDA ZX,HPOS
	STA HPOS
	LDA ZX,VPOS
	STA VPOS
	LDA ZX,VEL
	STA VEL
	LDA ZX,DIR
	STA DIR
20$:	LDX I,4
24$:	LDA ZX,PICT
	BMI 26$			;BALL INACTIVE
	LDA PLAYR
	BNE 40$			;IF PLAYER 2
	LDA ZX,DIR
	BMI 26$			;BALL GOING DOWN
	LDA ZX,HPOS
	CMP I,78
	BCS 28$			;BALL BELOW SERVE LINE
26$:	DEX
	DEX
	BPL 24$
30$:	RTS

40$:	LDA ZX,DIR
	BPL 26$			;BALL GOING DOWN
	LDA ZX,HPOS
	CMP I,78
	BCS 26$			;BALL ABOVE SERVE LINE

28$:	LDX PLAYR
	LDA ZX,CNTINT
	CMP I,03
	BCS 30$			;DON'T ALLOW TO MANY BRICKS
	JMP INITL
	.SBTTL PADDLE HITTING ROUTINE
;PADHIT-PADDLE HITTING ROUTINE
;
;ENTRY (X)	= BALL NUMBER (0,2 OR 4)
PADHIT:	LDA NPLAYR
	BNE 2$			;IF NOT IN ATTRACT MODE
	LDA FRAME+1
	AND I,0E0
	BNE 3$			;TIME FOR NEW GAME ANYWAY
	LDA ZX,HPOS
	CMP I,0E0
	BCC 1$			;IF BALL NOT AT PADDLE ROW
	LDA ZX,DIR
	BPL 1$			;IF BALL ALREADY GOING IN RIGHT DIRECTION
	JSR RFLTNS		;REFLECT BALL BACK
	STA ZX,DIR		;NEW BALL DIRECTION
	LDA HITS
	CMP I,30
	BCC 20$			;KEEP GOING IN ATTRACT MODE
3$:	LDA I,0
	STA NBALL		;STOP ATTRACT MODE
1$:	RTS

2$:	LDA ZX,PICT
	BMI 1$		;IF BALL NOT ON SCREEN
	LDY PLAYR
	LDA GAME
	CMP I,01
	BNE 16$			;IF NOT DOUBLE BREAKOUT
	LDA ZX,HPOS
	CMP AY,PADPOS
	BCC 16$			;NOT IN POSITIN
	CMP AY,PADPOS+2
	BCC 18$			;IN UPPER PADDLE

16$:	LDA ZX,HPOS
	CMP AY,PADPOS+4
	BCC 1$			;IF NOT IN POSITION TO HIT PADDLE
	CMP AY,PADPOS+6
	BCS 1$			;BALL IS BY PADDLE
18$:	LDA PADDLE		;CHECK
	CLC
	ADC I,04
	CMP ZX,VPOS
	BCC 1$			;BALL TO THE TOP/LEFT OF PADDLE
	LDA PADLEN
	EOR I,0FF		;-9 TO -17=PICT
	CLC
	ADC I,01
	STA TEMP4
	CLC
	ADC PADDLE		;VPOS - PICT = LOWER LIMIT OF BALL
	CMP ZX,VPOS
	BCS 1$			;IF BALL BELOW/RIGHT OF PADDLE
	LDA ZX,DIR
	EOR AY,BALLDR
	BPL 1$			;IF BALL ALREADY HIT
20$:	INC HITS
	BNE 4$			;IF NO OVERFLOW
	LDA I,80
	STA HITS		;GO BACK TO 128 HITS
4$:	INC NOISES
	LDA HITS
	LSR
	LSR			;HITS/4
	CMP I,04
	BCC 6$			;USE 0-3
	LDA I,3
6$:	TAY
	LDA ZX,VEL
	CMP I,08
	BCS 8$			;IF AT MAX VELOCITY NOW,
	LDA AY,NEWVEL		;SET NEW VELOCITY
	STA ZX,VEL
8$:	LDA NPLAYR
	BNE 9$			;IF NOT IN ATTRACT
	LDA I,0
	BEQ 10$

9$:	LDA TEMP4
	SEC			;NEGATIVE NUMBER
	ROR			;DIVIDE BY 2
	CLC
	ADC I,01		;DON'T FORGET ABOUT LEFT OF PADDLE
	ADC PADDLE		;MIDDLE OF PADDLE POSITION
	SEC
	SBC ZX,VPOS
	STA TEMP3		;SAVE DISTANCE FROM MIDDLE OF PADDLE
	LDA I,01
	BCS 10$			;IF HITTING RIGHT HALF OF PADDLE
	LDA I,00
10$:	STA TEMP4
	LDA ZX,VEL
	CMP I,08
	BCC 11$			;IF NOT AT MAX
	LDA I,2
	BNE 14$

11$:	LDA HITS
	AND I,0FC		;CLEAR LOWER 2 DIGITS
	CMP I,0C
	BCC 12$			;IF LESS THAN 12 HITS
	LDA I,0
	BEQ 14$
	
12$:	STA TEMP3+1
	LDA TEMP3
	JSR ABS
	CMP I,03
	LDA I,0			;IF HITTING EDGE OF PADDLE
	BCS 13$
	LDA I,02		;HAS DIFFERENT ANGLE
13$:	ORA TEMP3+1
14$:	ORA TEMP4
	TAY
	LDA AY,ANGLE		;GET NEW ANGLE
	LDY PLAYR
	BEQ 21$			;IF PLAYER 1 DIRECTION IS RIGHT
	JSR RFLTNS		;INVERT DIRECTION
21$:	STA ZX,DIR
	LDA ZX,PICT
	AND I,01
	BEQ 22$			;IF BALL WAS ACTIVE
	INC NBALL
22$:	LDA ZX,PICT
	AND I,80
	STA ZX,PICT		;CLEAR BALL OPTIONS
	LDA I,40
	STA BHIT		;ALLOW ANY BRICK TO BE HIT
	JMP CHKHIT		;CHECK FOR ACTION AFTER PADDLE HIT

ANGLE:	.BYTE 1C,64		;0-3 HITS OR 12 + HITS
	.BYTE 28,58		;MAX VELOCITY TOO
	.BYTE 28,58		;4-7 HITS
	.BYTE 30,50
	.BYTE 10,70		;8-11 HITS
	.BYTE 10,70
NEWVEL:	.BYTE 5,6,6,7		;VELOCITY CHANGES DEPENDING ON PADDLE HITS
PADPOS:	.BYTE 0B5,2D		;PADDLE POSITIONS RELATIVE TO BALL FOR PLAYERS 1 & 2
	.BYTE 0BF,37
	.BYTE 0DD,05
	.BYTE 0E7,0F
BALLDR:	.BYTE 0,0FF		;MASK USED FOR DETERMINING IF BALL IS
				;GOING RIGHT DIRECTION


;POS-GET PLAYFIELD POSITION
;
;ENTRY (X)	= MOTION OBJECT NUMBER
;EXIT (TEMP1,TEMP1+1) = SCREEN ADDRESS FOR POSITION IN (HPOS,VPOS)
POS:	LDA ZX,HPOS		;GET HORIZONTAL POSITION (18-E8)
	CLC
	ADC I,08		;CHANGE HORIZONTAL TO (07-F7)
	LSR
	LSR
	LSR			;(0-1F)
	EOR I,1F		;INVERT POSITION
	STA TEMP1		;SAVE HORIZONTAL POSITION
	LDA I,PLYFLD&0FF00/100
	STA TEMP1+1		;SAVE STARTING MSB
	LDA I,0
	STA TEMP2
	LDA ZX,VPOS		;VERTICAL POSITION (20-FF)
	CLC
	ADC I,0F		;CHANGE VERTICAL TO 27 TO F7
	ORA I,7			;MOVE TO BYTE BARRIER
	EOR I,0FF		;INVERT TO CHANGE POINTS OF ORIGIN
	ASL
	ROL TEMP2
	ASL
	ROL TEMP2
	CLC
	ADC TEMP1
	STA TEMP1		;ACTUAL ADDRESS FOR BYTE (LSB)
	LDA TEMP2
	ADC TEMP1+1
	STA TEMP1+1		;ADD MSB TOGETHER
	RTS
	
	
	.SBTTL PADDLE ADD/CLEAR ROUTINE
;PUTPAD-ADD/CLEAR PADDLE
PUTPAD: LDA I,0
	STA TEMP2
	LDA I,04
	STA TEMP2+1
	LDA I,01
	STA TEMP1+1
	LDA I,0BD		;CLEAR PADDLE ROW
	STA A,762
	STA A,767
	STA A,77D		;SPECIAL CASE OF RIGHT EDGE
	STA A,778
	LDX I,02
	LDY I,07
	LDA PLAYR
	BEQ 30$			;IF PLAYER 1 IS UP
	LDX I,1D
	LDY I,18
30$:	LDA GAME
	CMP I,01
	BEQ 1$			;NO SECOND PADDLE
	TXA			;SECOND PADDLE ROW
	TAY
1$:	STY TEMP3+1
	STX TEMP3
	LDX I,26.
2$:	LDA TEMP2
	CLC
	ADC I,20
	STA TEMP2
	BCC 3$
	INC TEMP2+1
3$:	LDA I,0
	LDY TEMP3
	STA NY,TEMP2
	LDY TEMP3+1
	STA NY,TEMP2
	DEX
	BNE 2$			;CLEAR ENTIRE ROW
	LDA PADLEN
	BEQ 20$		;IF NO PADDLE
	LDA PADDLE	;18-E7
	EOR I,0FF	;18-E7
	SEC
	SBC I,10		;8 TO D7
	ROL
	ROL TEMP1+1		;COMPUTE ADDRESS OF PADDLE
	ROL
	ROL TEMP1+1		;4 TO 7
	AND I,0E0		;0,10,40,E0
	STA TEMP1
	LDA PADDLE
	AND I,07
	EOR I,0FF	;-1 TO -8
	STA TEMP2+1
	CLC
	ADC I,0B0
	LDY TEMP3
	STA NY,TEMP1	;FIRST PART OF PADDLE
	LDY TEMP3+1		;WE ARE USING 2 PADDLES
	STA NY,TEMP1
	LDA TEMP1
	CLC
	ADC I,20
	STA TEMP1
	BCC 7$
	INC TEMP1+1
7$:	LDA PADLEN
	CLC
	ADC TEMP2+1	;LENGTH REMAINING
	BEQ 20$		;NO PADDLE LEFT
	CMP I,09
	BCC 8$		;IF LENGTH LESS THAN 9
	SEC
	SBC I,08	;NEW LENGTH
	STA TEMP2+1
	LDA I,0A8
	STA NY,TEMP1		;2 PADDLES
	LDY TEMP3
	STA NY,TEMP1	;MIDDLE PART OF PADDLE
	LDA TEMP1
	CLC
	ADC I,20
	STA TEMP1
	LDA TEMP2+1
	BCC 8$
	INC TEMP1+1
8$:	CLC
	ADC I,0A0
	TAX
	LDA TEMP1	;SPECIAL CASE THE LOCATION 762
	CMP I,60
	BCC 18$
	LDA TEMP1+1
	CMP I,07
	BNE 18$
	TXA
	CLC
	ADC I,1A
	TAX		;CHANGE A1,A2 TO BB,BC
18$:	TXA
	LDY TEMP3
	STA NY,TEMP1	;STORE LAST PART OF PADDLE
	LDY TEMP3+1		;2 PADDLES
	STA NY,TEMP1
20$:	RTS


	.SBTTL WAIT FOR START BUTTON TO BE PUSHED
READY:	LDA I,80		;CLEAR BALL AND PADDLES
	STA PICT
	STA SAVBAL
	STA SAVBAL+1
	LDA I,0
	STA GSW			;CLEAR GAME SWITCH DEBOUNCE FLAG
	STA CNTINT		;RESET COUNT OF INITIALIZATION
	STA CNTINT+1
	STA PADLEN
	STA NPLAYR		;SET ATTRACT MODE
	STA NBALL		;CLEAR NUMBER OF BALLS ON SCREEN
	STA PLAYR		;START WITH FIRST PLAYER
	STA BALL		;RESET BALL NUMBER
	STA FRAME+1		;TIMER RESET FOR ATTRACT MODE
	LDA $CRDT
	BNE 14$			;IF CREDIT
	LDA CNTDWN
	BEQ 18$			;IF IN SELF PLAY
	DEC CNTDWN
	BNE 20$			;LEAVE BRICKS ALONE
18$:	DEC GAME
	BPL 19$			;ROTATE GAME IN ATTRACT
	LDA I,2
	STA GAME
19$:	JMP INIT		;INITIALIZE BRICKS

20$:	RTS
	
14$:	LDA I,14.
	STA PADLEN		;USE LARGE PADDLE
	LDA FREPLY
	ASL
	ASL
	STA FREPLY		;SAVE WHO HAS FREE GAME
1$:	JSR WAIT		;WAIT FOR NEXT FRAME
	JSR CHKGAM		;CHECK GAME SWITCH
	STA A,SVLIT1+1		;TURN LED'S OFF IN CASE 9334 GLITCHED
	STA A,SVLIT2+1
	LDA FRAME
	AND I,10
	BNE 2$
	STA A,LITE1		;TURN OFF LIGHTS
	STA A,LITE2
	BEQ 4$

2$:	LDA $CRDT
	CMP I,02
	BCC 4$			;NOT ENOUGH CREDIT FOR 1 PLAYER
	STA A,LITE1+1		;TURN ON LIGHTS
	CMP I,04
	BCC 4$			;NOT ENOUGH FOR 2 PLAYERS
	STA A,LITE2+1
4$:	BIT A,PLSW
	BMI 6$			;IF NOT A TWO PLAYER START
	LDA $CRDT
	CMP I,04
	BCC 1$			;NOT ENOUGH CREDIT
	SEC
	SBC I,04
	STA $CRDT
	LDA I,2
	STA NPLAYR		;SET NUMBER OF PLAYERS
10$:	LDA I,2
	STA CNTDWN		;RESET COUNTDOWN BEFORE SELF PLAY
	LDA I,0
	STA SCORE1		;CLEAR SCORE
	STA SCORE1+1
	STA SCORE2
	STA SCORE2+1
	STA CNTINT		;CLEAR INIALIZATION COUNTS
	JMP INIT		;INITIALIZE BRICKS

6$:	BVS 1$			;IF NOT A ONE PLAYER START
	LDA $CRDT
	CMP I,02
	BCC 1$			;NOT ENOUGH CREDIT
	DEC $CRDT
	DEC $CRDT
	LDA I,1
	STA NPLAYR		;SET NUMBER OF PLAYERS
	LDA FREPLY
	AND I,08
	BEQ 10$			;IF NO FREE PLAY FOR PLAYER 2
	LDA I,04
	STA FREPLY		;NO FREE GAME FOR PLAYER 1
	BNE 10$
	
	
	.SBTTL RESTORE PREVIOUS PLAYERS POSITION
RESTOR:	LDA NPLAYR
	CMP I,02
	BCS 2$		;IF NOT IN ATTRACT MODE OR ONE PLAYER
	RTS

2$:	LDA I,0
	STA NBRICK	;CLEAR BRICK COUNT
	LDX SCROLL		;REPLACE SCOLL VALUES
	LDA SAVSRL
	STX SAVSRL
	STA SCROLL
	LDX PICT+2
	LDA SAVBAL
	STA PICT+2		;RESTORE OTHER BALLS IN PRESENT
	STX SAVBAL
	LDX PICT+4
	LDA SAVBAL+1
	STA PICT+4
	STX SAVBAL+1
	JSR INIT2A		;RESTORE BALL DIRECTION VELOCITIES AND POSITIONS
	JSR BLANK1		;ADD TOP ROW TO CLEAR OTHER PLAYERS SCORES
	LDY I,0
	LDA I,27
	STA TEMP1		;(TEMP1,TEMP1+1)=ADDRESS FOR SAVING BRICKS
	LDA I,04
	STA TEMP1+1
	STA TEMP4+1		;(TEMP4,TEMP4+1)=ADDRESS FOR RESTORING BRICKS
	LDA I,21
	STA TEMP4
	LDA I,0
	STA TEMP2+1		;(TEMP2,TEMP2+1)=ADDRESS OF SAVE BUFFER
	LDX I,BUFFER
	LDA PLAYR
	BNE 4$			;RESTORE PLAYER 2'S BRICKS-SAVE PLAYER 1'S
	LDX I,BUFFER+38.	;RESTORE PLAYER 1'S BRICKS-SAVE PLAYER 2'S
	LDA I,31
	STA TEMP1
	LDA I,07
	STA TEMP1+1
	STA TEMP4+1
	LDA I,37
	STA TEMP4
4$:	STX TEMP2
5$:	LDX I,7
	LDA I,0
	STA TEMP3	;BUILD NEW BUFFER ENTRY
	LDA NY,TEMP2
	STA TEMP3+1	;SAVE CURRENT BUFFER ENTRY
10$:	LDA NY,TEMP1
	CMP I,0BE
	BNE 12$		;IF NOT A BRICK
	SEC
	BCS 13$

12$:	CLC
13$:	ROR TEMP3
	INC TEMP1	;ASSUMES NO PAGE CROSSINGS
	DEX
	BPL 10$		;LOOP FOR 8 POSSIBLE BRICKS
	LDA TEMP3
	STA NY,TEMP2	;SAVE POSITION
	LDX I,7
20$:	ROR TEMP3+1
	BCS 22$		;IF A BRICK
	LDA I,0
	STA NY,TEMP4		;CLEAR ANY POSSIBLE BRICK
	LDY I,20
	STA NY,TEMP4
	BNE 24$

22$:	INC NBRICK	;INCREMENT COUNT OF BRICKS
	LDA I,0BE
	STA NY,TEMP4	;ADD A BRICK
	LDA I,0BF
	LDY I,20
	STA NY,TEMP4
24$:	LDY I,0
	INC TEMP4
	DEX
	BPL 20$		;LOOP FOR 8 POSSIBLE BRICKS
	LDA PLAYR
	BEQ 40$			;PLAYER 2 WAS UP
	INC TEMP2
	LDA TEMP1
	AND I,1F	;GET ROW NUMBER
	CMP I,1F
	BNE 5$		;USE NEXT 8 IN THIS ROW
	LDA TEMP4	;UPDATE DESTINATION
	CLC
	ADC I,28
	STA TEMP4
	LDA TEMP1
	CLC
	ADC I,28	;SKIP LOWER HALF OF BRICKS
	STA TEMP1
	BCC 32$		;IF NO CARRY
	INC TEMP4+1
	INC TEMP1+1
32$:	LDA TEMP2
	CMP I,BUFFER
	BCC 34$		;ALL DONE
	CMP I,BUFFER+39.
	BCC 5$		;NOT DONE YET
34$:	LDA BALL
	CMP I,01
	BNE 36$		;IF NOT FIRST BALL POSITION IS VALID
	CMP PLAYR
	BNE 36$		;IF NOT FIRST BALL FOR SECOND PLAYER
	JMP INIT	;START WITH A FRESH RACK
	
36$:	RTS
	
40$:	DEC TEMP2		;NEW BUFFER ENTRY
	LDA TEMP1		;RESET SOURCE ADDRESS
	SEC
	SBC I,16.
	STA TEMP1
	LDA TEMP4		;RESET DESTINATION ADDRESS
	SEC
	SBC I,16.
	STA TEMP4
	AND I,1F
	EOR I,1F
	BNE 32$			;IF WE HAVE OVERFLOWED A COLUMN
	LDA TEMP4		;RESET DESTINATION ADDRESS FOR NEW COLUMN
	SEC
	SBC I,28
	STA TEMP4
	LDA TEMP1		;SAME FOR SOURCE ADDRESS
	SEC
	SBC I,28
	STA TEMP1
	BCS 32$			;NO PAGE OVERFLOW CONTINUE
	DEC TEMP1+1
	DEC TEMP4+1
	BNE 32$			;ALWAYS


	.SBTTL ROW PRESETING ROUTINES
;ROSET-PRESET ROW WITH 8 ROWS OF BRICKS AS IN BREAKOUT.
ROSET:	LDA I,MES22/100
	STA TEMP1+1		;SET SOURCE ADDRESS FOR ROW OF BRICKS
	LDA I,MES22&0FF
	STA TEMP1
	LDY PLAYR
	LDX AY,ROSETA
	LDA AY,ROSETB
	STA TEMP4		;ENDING ROW ADDRESS


;ROSET2-PRESET ROWS OF BRICKS
;
;ENTRY (X)	= STARTING ROW ADDRESS(0 TO 1F)
;      (TEMP4)	= ENDING ROW ADDRESS(0 TO 1F)
;(TEMP1,TEMP1+1)= SOURCE ADDRESS FOR DESIRED BRICK FORMAT
ROSET2:	LDA I,PLYFLD/100
	STA TEMP2+1
	TXA
	STA TEMP2		;RESET STARTING ADDRESS OF DESTINATION
	PHA
	LDA I,60
	JSR MESS		;WRITE A ROW
	PLA
	TAX
	DEX
	BMI 2$			;IF VALUE BELOW 0
	CPX TEMP4
	BCS ROSET2
2$:	RTS
	
ROSETA:	.BYTE 1A,0C		;STARTING ROW ADDRESS FOR 8 ROWS OF BRICKS
ROSETB:	.BYTE 13,05		;ENDING ROW ADDRESS FOR BRICKS


	.SBTTL DISPLAY PLAYERS SCORE
;SCORE-ADD SCORES TO SCREEN
;
;ENTRY (A) = PLAYER NUMBER (0 OR 1)
;  (PLAYR) = CURRENT PLAYER NUMBER
SCORE:	LDY I,0B0
	TAX
	CMP PLAYR
	BNE 2$			;IF DIFFERENT PLAYERS
	LDA NPLAYR
	BEQ 2$			;IF IN ATTRACT MODE
	LDA FRAME
	AND I,10
	BNE 2$			;NOT TIME TO TURN OFF SCORE
	LDY I,0
2$:	TXA			;X=0 OR 1
	BNE 3$			;IF PLAYER 2
	LDA I,PLYFLD+60&0FF
	STA TEMP1		;SET UP INDIRECT POINTER FOR DESTINATION
	LDA I,PLYFLD+60&0FF00/100
	STA TEMP1+1
	BNE 4$

3$:	LDA I,PLYFLD+2A0&0FF00/100
	STA TEMP1+1
	LDA I,PLYFLD+2A0&0FF
	STA TEMP1		;INDIRECT POINTER FOR DESTINATION
4$:	LDA PLAYR
	BEQ SCOR0		;IF PLAYER 1 IS UP
	TYA
	BEQ 10$			;BLANK OUT SCREEN
	LDA I,97		;PLAYER 2 NUMBERS
10$:	STA TEMP2
	LDA I,1F		;SET INDEX FOR PLAYER 2 SIDE
	STA TEMP4+1
	LDA I,3F
	STA TEMP4
	LDA I,5F
	STA TEMP3+1
	LDA I,7F
	STA TEMP3
	BNE SCOR1		;ALWAYS

;SCOR0 - CHANGE SCORE ON SCREEN FOR PLAYER 1
;
;ENTRY	(X) = SCORE NUMBER (0,1,2,3,4)
;	(TEMP1,TEMP1+1) = DESTINATION FOR SCORE
;	(Y) = OFFSET FOR CHARACTERS (B0 OR 0)
;
SCOR0:	STY TEMP2		;OFFSET FOR CHARACTER (0=BLANK, B0=PLAYER 1 NUMBERS)
	LDA I,0			;OFFSETS FOR EACH DIGIT OF NUMBER
	STA TEMP3
	LDA I,20
	STA TEMP3+1
	LDA I,40
	STA TEMP4
	LDA I,60
	STA TEMP4+1
	
;SCOR1-CHANGE SCORE ON SCREEN
;
;ENTRY-(X)=SCORE NUMBER (0,1,2,3 OR 4)
;	(TEMP1,TEMP1+1)=DESTINATION FOR SCORE
;	(TEMP2)=MASK FOR CHARACTER
;	(TEMP3-TEMP4+1)=INDEX OF WHERE TO STORE RESULT
SCOR1:	LDA I,0
	LDY TEMP3+1
	STA NY,TEMP1		;CLEAR PREVIOUS SCORE
	LDY TEMP3
	STA NY,TEMP1
	LDA ZX,SCORE2
	BEQ 6$			;ZERO SUPPRESS DIGITS
	AND I,0F0
	BEQ 5$			;IF FIRST DIGIT ZERO
	LSR
	LSR
	LSR
	LSR
	ADC TEMP2		;DIGIT OR A BLANK
	STA NY,TEMP1		;DISPLAY IT
5$:	LDA ZX,SCORE2
	AND I,0F
	CLC
	ADC TEMP2		;CHANGE TO A DIGIT OR BLANK
	LDY TEMP3+1
	STA NY,TEMP1		;DISPLAY DIGIT OR BLANK
6$:	LDA ZX,SCORE1
	AND I,0F0
	LSR
	LSR
	LSR
	LSR
	ADC TEMP2		;CHANGE TO A DIGIT OR BLANK
	LDY TEMP4
	STA NY,TEMP1		;DISPLAY DIGIT OR BLANK
	LDA ZX,SCORE1
	AND I,0F
	CLC
	ADC TEMP2		;CHANGE TO DIGIT OR BLANK
	LDY TEMP4+1
	STA NY,TEMP1		;DISPLAY DIGIT OR BLANK
	RTS


	.SBTTL WAIT FOR PLAYER TO HIT SERVE BUTTON
SERVE:	LDA NPLAYR
	BEQ 2$			;IF IN ATTRACT MODE SERVE BALL
	LDA I,14.
	STA PADLEN		;RESET PADDLE SIZE
	LDA I,0
	STA GSW			;SET GAME SWITCH DEBOUNCE FLAG
1$:	JSR WAIT		;WAIT FOR VBLANK
	JSR CHKGAM		;CHECK GAME SELECT SWITCH
	LDA A,SVSW1		;PLAYER 1 SWITCH
	LDX PLAYR
	BEQ 3$			;PLAYER 1 IS UP
	LDA A,SVSW2		;PLAYER 2 SWITCH
3$:	ROL
	BCS 2$			;IF BUTTON PUSHED
	LDA PLAYR
	BEQ 6$			;PLAYER 1 UP
	LDA FRAME
	AND I,10
	STA A,SVLIT1+1		;BEWARE 9334 GLITCHES
	STA A,SVLIT2+1
	BEQ 1$			;LEAVE LIGHT OFF
	STA A,SVLIT2		;TURN IT ON
	BNE 1$			;ALWAYS

6$:	LDA FRAME
	AND I,10
	STA A,SVLIT1+1
	STA A,SVLIT2+1		;BEWARE 9334 GLITCHES
	BEQ 1$			;FLASH SER LITE
	STA A,SVLIT1		;TURN IT ON
	BNE 1$

2$:	LDA I,0
	STA HITS		;RESET # OF PADDLE HITS
	LDA PLAYR
	BNE 10$			;IF PLAYER 2 IS UP
	LDA I,0C4
	JSR MESS		;TURN OFF BONUS MESSAGE
	LDA I,0
	TAY
	STA NY,TEMP2		;DELETE SCORE
	LDY I,20
	STA NY,TEMP2
	LDY I,40
	STA NY,TEMP2
	LDY I,60
	STA NY,TEMP2
10$:	LDA FRAME
	ORA I,080		;WAIT AT MOST 2 SECONDS
	AND I,0E1		;WAIT AT LEAST 1/2 SECOND BEFORE SERVE
	STA FRAME		;BE SURE TO PRESEVE FRAME PARITY
4$:	JSR WAIT		;WAIT FOR VBLANK
	STA A,SVLIT1+1		;TURN OFF SERVE LITE
	STA A,SVLIT2+1
	LDA CNCTR
	BNE 5$			;IF COIN ENTERED ABORT LOOP
	LDA FRAME
	BNE 4$			;WAIT BEFORE SERVING
5$:	LDA BALL
	CMP I,01
	BNE 7$			;IF NOT FIRST BALL
	LDA I,0
	STA SCROLL		;RESET SCROLL COUNT
7$:	LDX I,00
	STX NOISES		;CLEAR NOISE COUNTERS
	STX NOISES+1
	STX NOISES+2
	
	
;SERVE1-SERVE A BALL
;
;ENTRY (X)=BALL NUMBER (0,2,OR4).
SERVE1:	INC NBALL		;ADD AN ACTIVE BALL
	JSR RAND		;GET RANDOM NUMBER
	CMP I,20
	BCS 3$			;IF NUMBER LARGE ENOUGH
	LDA I,20
3$:	CMP I,0E0
	BCC 5$			;IF NUMBER SMALL ENOUGH
	LDA I,0E0
5$:	STA ZX,VPOS		;STARTING POSITION
6$:	JSR RAND		;GET RANDOM NUMBER
	AND I,38		;0 TO 38
	CMP I,20
	BEQ 6$			;DO NOT ALLOW THIS DIRECTION
	LDY PLAYR
	CLC
	ADC AY,99$		;A0 TO D8=SERVE DIRECTION FOR PLAYER 1
	STA ZX,DIR		;SET DIRECTION
	LDA I,78
	STA ZX,HPOS		;PUT IT ON THIS ROW
	LDA I,2
	STA ZX,PICT		;SELECT PICTURE OF BALL
	LDA I,4
	STA ZX,VEL		;SET VELOCITY
	LDA I,40
	STA BHIT		;CLEAR POSITION OF LAST BRICK HIT
4$:	RTS

99$:	.BYTE 0A0,20		;DIRECTION OFFSET FOR SERVE


	.SBTTL WAIT FOR VBLANK AND UPDATE VIDEO
;WAIT-VBLANK PROCESSING ROUTINE.
;
;USES (TEMP1,TEMP1+1),(TEMP2,TEMP2+1),(TEMP3,TEMP3+1),TEMP4
WAIT:	LDA A,VSYNC
	CMP I,0D8		;VBLANK* CONROLS BLANKING
	BCS WAIT		;WAIT FOR END OF VBLANK
1$:	LDA A,VSYNC		;ITS OK TO START BEFORE VBLANK * BECAUSE OF
	CMP I,0D8		;IRQ AND PUTPAD
	BCC 1$			;WAIT FOR START OF VBLANK
	INC FRAME
	BNE 2$			;IF NO CARRY
	INC FRAME+1
2$:	STA A,WTCHDG		;PULSE WATCHDOG
	LDA PADLEN
	CLC
	ADC I,15		;MINIMUM VALUE FOR PADDLE POSITION
	STA TEMP4
	LDA PADDLE+1
	LDX PLAYR
	BNE 4$			;IF PLAYER 2
	EOR I,0FF		;SWITCH DIRECTIONS OF POT
4$:	CMP TEMP4
	BCS 5$			;IF VALUE EXCEEDS MIN
	LDX TEMP4
	BCC 10$

5$:	CMP I,0E8
	BCC 7$			;IF VALUE LESS THAN MAX
	LDX I,0E7
	BNE 10$
	
7$:	TAX			;COMPARE OLD & NEW VAULES
	SEC
	SBC PADDLE
	TAY
	JSR ABS
	CMP I,2
	BCC 12$			;IF VALUES CHANGED BY LESS THAN 2
	BNE 10$			;VALUES CHANGED BY MORE THAN 2
	DEX			;CHANGE BY ONLY ONE
	TYA
	BPL 10$			;CHANGED IN RIGHT DIRECTION
	INX
	INX
10$:	STX PADDLE		;SAVE PADDLE POSITION
12$:	JSR GETPOS		;UPDATE BALL POSITIONS
	JSR PUTPAD		;ADD NEW PADDLE
	LDA NPLAYR
	BEQ 3$			;IF IN ATTRACT MODE
	LDA BALL		;DISPLAY BALL NUMBER
	LDY PLAYR
	BEQ 20$
	JSR HEX2		;CONVERT TO PLAYER 2 FORMAT
	STA A,PLYFLD+1BF	;PUT IN THE MIDDLE
	BNE 30$			;ALWAYS

20$:	JSR HEX1		;CONVERT TO PLAYER 1 FORMAT
3$:	STA A,PLYFLD+1A0
30$:	LDA I,00
	JSR SCORE		;DISPLAY PLAYER SCORE
	LDA I,01
	LDX NPLAYR
	BEQ 14$			;IF ATTRACT MODE
	CMP NPLAYR
	BEQ 15$			;IF ONLY ONE PLAYER
14$:	JSR SCORE		;DISPLAY PLAYER 2 SCORE
15$:	JSR DISPRC		;DISPLAY GAME PRICE AND HIGH SCORE
	JSR RAND		;RESET RANDOM NUMBER SEED
	JSR COIN		;CHECK FOR COINS
	LDA PLAYR
	BNE 40$			;IF PLAYER 2 IS UP
	STA A,MASK1+1
35$:	LDA A,STSW
	BMI 6$			;IF SELF-TEST SWITCH OFF
	JMP STEST		;PERFORM SELF-TEST

6$:	RTS
	
40$:	STA A,MASK2+1		;START POT 2
	JMP 35$
	.SBTTL MESSAGES AND PROCESSING ROUTINE.
;MESS-MESSAGE PROCESSING ROUTINE
;
;ENTRY (A)	= BITS 0-5 = # OF MESSAGE
;		= BIT 5    = 1 IF SOURCE & DESTINATION ADDRESS ALREADY GIVEN
;		= BIT 6    = 1 WHITE ON BLACK ELSE BLACK ON WHITE
;		= BIT 7    = 1 CLEAR MESSAGE ELSE WRITE MESSAGE
; (TEMP1,TEMP1+1)=SOURCE ADDRESS IF BIT S ON
; (TEMP2,TEMP2+1)=DESTINATION ADDRESS IF BITS ON
;EXIT (TEMP2,TEMP2+1) = LWA+1 OF DESTINATION
;USES (TEMP1,TEMP1+1),(TEMP2,TEMP2+1),(TEMP3,TEMP3+1)
MESS:	LDX I,0
	LDY I,0
	STX TEMP3
	STX TEMP3+1
	CLC
	ROL
	ROL TEMP3		;SAVE CLEAR BIT
	ROL
	ROL TEMP3+1		;SAVE COLOR BIT
	LSR
	TAX
	AND I,40
	BNE 1$			;IF ADDRESSES GIVEN TO US
	LDA AX,MESB		;GET BASE ADDRESS FOR DESTINATION
	STA TEMP2
	LDA AX,MESB+1
	STA TEMP2+1
	TXA
	ASL
	ASL
	STA TEMP1
	LDA A,LANG		;GET LANGUAGE SW
	AND I,0C0
	LSR
	LSR
	LSR
	LSR
	LSR
	ORA TEMP1
	TAX
	LDA AX,MESA		;GET MESSAGE ADDRESS
	STA TEMP1
	LDA AX,MESA+1
	STA TEMP1+1
1$:	LDA NY,TEMP1		;GET MESSAGE CHARACTER
	BEQ 6$			;IF END OF MESSAGE
	CMP I,59
	BNE 9$			;NOT A Y
	LDA I,51		;Y IS WHERE Q IS
9$:	CMP I,5A
	BNE 2$			;IF NOT A Z
	LDA I,56		;Z IS WHERE V IS
2$:	CMP I,20
	BNE 10$			;IF NOT A BLANK
	LDA I,0			;USE ZERO
10$:	LDX TEMP3
	BEQ 3$			;IF WE ARE WRITING MESSAGE
	LDA I,0			;CLEAR THIS CHARACTER
	BEQ 4$

3$:	LDX TEMP3+1
	BEQ 4$			;IF BLACK ON WHITE
	ORA I,80
4$:	LDX I,0
	STA NX,TEMP2		;PUT CHARACTER ON SCREEN
	LDA TEMP2
	CLC
	ADC I,20		;INCREMENT DESTINATION BY 20
	STA TEMP2
	BCC 5$			;IF NO OVERFLOW
	INC TEMP2+1
5$:	INY
	BPL 1$			;CONTINUE TO COPY MESSAGE
6$:	RTS

MESA:	.WORD MES0		;ADDRESS OF MESSAGE
	.WORD MES0G		;HIGH SCORE
	.WORD MES0F
	.WORD MES0S
	.WORD MES1		;1 COIN 2 PLAYER
	.WORD MES1G
	.WORD MES1F
	.WORD MES1S
	.WORD MES2		;1 COIN 1 PLAY
	.WORD MES2G
	.WORD MES2F
	.WORD MES2S
	.WORD MES3		;2 COINS 1 PLAY
	.WORD MES3G
	.WORD MES3F
	.WORD MES3S
	.WORD MES4		;BONUS FOR
	.WORD MES4G
	.WORD MES4F
	.WORD MES4S
MESB:	.WORD 4A1		;BASE ADDRESS FOR DESTINATION
	.WORD 4A1
	.WORD 4A1
	.WORD 4A1
	.WORD 484
MES0:	.ASCIZ / HIGH SCORE /
MES0G:	.ASCIZ /BESTE PUNKTZAHL /
MES0F:	.ASCIZ /MEILLEUR SCORE /
MES0S:	.ASCIZ /  RECORD /
MES1:	.ASCIZ /1 COIN 2 PLAYERS/
MES1G:	.ASCIZ /1 MUENZE 2 SPIELER  /
MES1F:	.ASCIZ / 1 PIECE 2 JOUEURS /
MES1S:	.ASCIZ /1 FICHA 2 JUGADORES/
MES2:	.ASCIZ /1 COIN  1 PLAYER/
MES2G:	.ASCIZ /1 MUENZE  1 SPIELER /
MES2F:	.ASCIZ / 1 PIECE  1 JOUEUR /
MES2S:	.ASCIZ /1 FICHA 1 JUGADOR/
MES3:	.ASCIZ /2 COINS 1 PLAYER/
MES3G:	.ASCIZ /2 MUENZEN 1 SPIELER /
MES3F:	.ASCIZ / 2 PIECES 1 JOUEUR /
MES3S:	.ASCIZ /2 FICHAS 1 JUGADOR/
MES4:	.ASCIZ	/    BONUS FOR /
MES4G:	.ASCIZ	/ FREIES SPIEL /
MES4F:	.ASCIZ	/PARTIE GRATUITE /
MES4S:	.ASCIZ	/PARTIDO GRATIS /
MES20:  .BYTE 3D,20,20,20,20,20,20,20,20,20,20,20,20,20,20	;BORDER WITH BLANK MIDDLE
	.BYTE 20,20,20,20,20,20,20,20,20,20,20,20,3D,0
MES21:	.BYTE 3E,7F,7F,7F,7F,7F,7F,7F,7F,7F,7F,7F,7F,7F,7F	;TOP BORDER FOR PLAYER 1
	.BYTE 7F,7F,7F,7F,7F,7F,7F,7F,7F,7F,7F,7F,3F,0
MES22:	.BYTE 3D,3E,3F,3E,3F,3E,3F,3E,3F,3E,3F,3E,3F,3E,3F	;ROW OF BRICKS
	.BYTE 3E,3F,3E,3F,3E,3F,3E,3F,3E,3F,3E,3F,3D,0
MES23:	.BYTE 3D,7F,7F,7F,7F,7F,7F,7F,7F,7F,7F,7F,7F,7F,7F	;TOP BORDER FOR PLAYER 2
	.BYTE 7F,7F,7F,7F,7F,7F,7F,7F,7F,7F,7F,7F,3A,0
MES26:	.BYTE 3D,3E,3F,3E,3F,3E,3F,20,20,20,20,3E,3F,3E,3F	;ROW OF BRICKS WITH CAVITY
	.BYTE 3E,3F,20,20,20,20,3E,3F,3E,3F,3E,3F,3D,0
	.SBTTL MISC ROUTINES


;ABS - ABSOLUTE VALUE AND COMPLEMENT.
;
;ENTRY (A)	= VALUE TO BE USED
;EXIT (A)	= ABSOLUTE VALUE
ABS:	BPL COMP1			;IF POSITIVE OR ZERO
COMP:	EOR I,0FF
	CLC
	ADC I,1
COMP1:	RTS


;MULT - MULTIPLY TWO 8 BIT SIGNED VALUES
;
;ENTRY (A)	= OPERAND 1
;      (TEMP1)	= OPERAND 2 (POSITIVE 7 BIT INTEGER)
;EXIT(TEMP2,TEMP2+1) = RESULT (LSB,MSB)
;USES A,TEMP1,(TEMP2,TEMP2+1),(TEMP3,TEMP3+1)
MULT:	STA TEMP3
	LDA I,0			;CLEAR RESULT
	STA TEMP3+1
	STA TEMP2
	STA TEMP2+1
	LDA TEMP3
	BPL 1$		;IF POSITIVE RESULT
	LDA I,0FF
	STA TEMP3+1
1$:	LSR TEMP1
	BCS 2$			;TIME TO ADD IN
	BNE 4$			;MORE TO MULTIPLY
	RTS

2$:	CLC
	LDA TEMP2		;ADD TO RESULT
	ADC TEMP3
	STA TEMP2
	LDA TEMP2+1
	ADC TEMP3+1
	STA TEMP2+1
4$:	ASL TEMP3		;2*MULTIPLICAND
	ROL TEMP3+1
	JMP 1$


;RAND - RANDOM NUMBER GENERATOR
;
;EXIT (A)=RANDOM NUMBER
RAND:	ASL POLYL		;SHIFT LEFT
	ROL POLYH
	BPL 1$
	INC POLYL
1$:	LDA POLYL		;CHANGE BIT 0 DEPENDING ON BIT 1
	AND I,2
	BEQ 2$
	LDA POLYL
	EOR I,1
	STA POLYL
2$:	LDA POLYH		;CHECK FOR ZERO
	ORA POLYL
	BNE 3$
	INC POLYL
3$:	LDA POLYL
	RTS

	
;RFLTEW-REFLECT DIRECTION IN EW AXIS
;
;ENTRY (A)=DIRECTION (0-FF, 0=NORTH, 40=EAST).
;EXIT  (A)=NEW DIRECTION.
RFLTEW:	SEC
	SBC I,40		;ROTATE 90 DEGREES
	JSR RFLTNS		;REFLECT THRU NS AXIS
	CLC
	ADC I,40		;ROTATE AXIS BACK TO ORIGINAL
	RTS
	
	
;RFLTNS-REFLECT DIRECTION IN NX AXIS
;
;ENTRY (A)=DIRECTION (0=FF, 0=NORTH, 40=EAST).
;EXIT  (A)=NEW DIRECTION
RFLTNS	=COMP			;SAVE AS COMPLEMENT
	
;SIN-SINE
;
;ENTRY (A)	= ANGLE 10 TO FF REPRESENTS 0 TO 360 DEGREES
;EXIT (A)	= SINE (-127 TO +127)
;USES A,X
SIN:	SEC			;SIN(A)=COS(PI/2-A) FOR CLOCKWISE
	SBC I,40		;SIN(A)=COS(A-PI/2) FOR COUNTER-CLOCKWISE


;COS-COSINE
;
;ENTRY (A)	= ANGLE (0 TO FF REPRESENTS 0 TO 360 DEGREES)
;EXIT (A)	= COSINE (-127 TO +127)
;USES A,X
COS:	LSR
	LSR			;0 TO 3F
	TAX
	LDA AX,77$		;COSINE
	RTS

77$:	.BYTE 0,13.,25.,37.,49.,60.,71.,81.		;COS (0-7)
	.BYTE 91.,99.,106.,113.,118.,122.,126.,127.	;COS (8-F)
	.BYTE 127.,127.,126.,122.,118.,113.,106.,99.		;COS (10-17)
	.BYTE 91.,81.,71.,60.,49.,37.,25.,13.		;COS (18-1F)
	.BYTE 0,-13.,-25.,-37.,-49.,-60.,-71.,-81.	;COS (20-27)
	.BYTE -91.,-99.,-106.,-113.,-118.,-122.,-126.,-127.	;COS (28-2F)
	.BYTE -127.,-127.,-126.,-122.,-118.,-113.,-106.,-99.	;COS (30-37)
	.BYTE -91.,-81.,-71.,-60.,-49.,-37.,-25.,-13.	;COS (38-3F)

	.REPT PROG+1000-.
	.BYTE 0			;ZERO REMAINING ROM
	.ENDM
	.IF GE,PROG+1000-.
	.=PROG+1000		;PUT DIAGNOSTICS IN UPPER PROM/ROM
	.ENDC


	.SBTTL IRQ PROCESSING ROUTINE
IRQ:	PHA
	STA A,INTACK		;ACKNOWLEDGE INTERUPT
	CLI
	LDA A,VSYNC
	AND I,20
	BEQ 1$			;ALLOW ONLY 4 PER FRAME NOT A VBLANK
	PLA
	RTI
	
1$:	TXA
	PHA
	CLD
	TSX
	LDA AX,105		;GET PCH
	CMP I,PROG&0FF00/256.	;VALID RANGE?
	BCC IRQ3
	CMP I,PROG+1800&0FF00/256.
	BCS IRQ3
	LDA A,COINS		;ANY COINS?
	LDX I,1
	ROL
	ROL KOINS+1
	ROL
	ROL KOINS
3$:	LDA ZX,KOINS
	BNE 4$			;IF COINS COMING OR GOING IN LAST 8 IRQ'S
	LDA ZX,SLFLG
	BEQ 5$			;IF NO COIN SEEN YET
	DEC ZX,SLFLG		;COUNT DOWN FOR SLAM DETECTION
	BNE 5$			;COUNTDOWN NOT COMPLETE YET
	INC CNCTR
	BNE 5$

4$:	AND I,0FC
	CMP I,0F8		;FOUR IRQ'S ON (ONE FRAME) AND ONE IRQ OFF
	BNE 5$			;IF NOT END OF COIN
	LDA ZX,SLFLG
	BEQ 6$			;NOT COIN PRESENT
	INC CNCTR		;COUNT PREVIOUS COIN
6$:	LDA I,20
	STA ZX,SLFLG
5$:	DEX
	BPL 3$			;LOOP FOR 2 COIN COUNTERS
	LDA A,SLAM
	AND I,40
	BNE IRQ2
	STA KOINS
	STA KOINS+1
	STA SLFLG
	STA SLFLG+1
IRQ2:	PLA			;RETURN FROM IRQ/NMI
	TAX
	PLA
	RTI

IRQ3:	JMP PWRON		;PROGRAM IS NOT RUNNING

	.SBTTL NMI POT READING ROUTINE
NMI:	PHA
	CLD
	LDA A,VSYNC		;GET POT VALUE (0 TO FF)
	SEC
	SBC I,48
	BCS 4$			;IF NUMBER LARGE ENOUGH
	LDA I,0
	STA PADDLE+1
	BEQ 8$

4$:	BPL 6$			;IF NUMBER TOO LARGE
	LDA I,0FF
	STA PADDLE+1
	BNE 8$
	
6$:	STA PADDLE+1
	LDA A,VSYNC2
	ROL
	ROL PADDLE+1		;ADD LSB
8$:	STA A,MASK1		;TURN OFF NMI
	STA A,MASK2
	PLA			;RESTORE A
	RTI			;RETURN
	
	
	.SBTTL POWER ON AND SELF-TEST ROUTINES
PWRON:	CLD			;USE HEX MODE THROUGHOUT
	LDX I,07F
	TXS			;SET STACK POINTER
	LDA I,0
	STA A,MASK1		;STOP NMI
	STA A,MASK2
	STA A,COINCT		;TURN OFF COIN COUNTER
	TAX
2$:	STA ZX,0		;CLEAR FIRST PAGE
	INX
	BNE 2$
	LDA I,0FF
	STA PICT+2		;CLEAR BALL 2 AND 3
	STA PICT+4
	LDA A,STSW
	BPL STEST		;START SELF-TEST
	CLI			;ENABLE IRQ
	JMP START		;START GAME


	.SBTTL	INTERNAL SELF-TEST DIAGNOSTIC ROUTINE
STEST:	SEI			;DISABLE IRQ
	LDX I,0
	STX A,MASK1		;STOP NMI
	STX A,MASK2
1$:	TXA			;FILL UP RAM WITH
	CLC			;TEST PATTERN
	ADC I,4
	STA AX,400
	CLC
	ADC I,1
	STA AX,500
	CLC
	ADC I,1
	STA AX,600
	CLC
	ADC I,1
	STA AX,700
	STA A,WTCHDG		;PULSE WATCHDOG
	INX
	BNE 1$
2$:	TXA			;NOW CHECK RAM CELLS
	CLC
	ADC I,4
	EOR AX,400
	BNE 3$			;IF RAM FAILURE, TELL USER
	TXA
	CLC
	ADC I,5
	EOR AX,500
	BNE 3$
	TXA
	CLC
	ADC I,6
	EOR AX,600
	BNE 3$
	TXA
	CLC
	ADC I,7
	EOR AX,700
	BNE 3$
	STA A,WTCHDG		;PULSE WATCHDOG
	INX
	BNE 2$
	TXA
20$:	STA AX,400		;BLANK SCREEN
	STA AX,500
	STA AX,600
	STA AX,700
	INX
	BNE 20$
	BEQ STEST0
	
3$:	SEC
31$:	ROR
	BEQ 38$		;END OF LOOP
	LDX I,8
	BCC 32$
	LDX I,1
32$:	STX NOISE	;START NOISE
	LDX I,0
	LDY I,0
34$:	INX		;WAIT FOR AWHILE
	BNE 34$
	STA A,WTCHDG
	INY
	BNE 34$
	STX NOISE	;STOP NOISE
36$:	INX
	BNE 36$
	STA A,WTCHDG
	INY
	BNE 36$		;WAIT AWHILE
	CLC
	BEQ 31$		;TRY NEXT BIT
	
38$:	STA A,WTCHDG
	BIT A,STSW
	BPL 38$		;LOOP UNTIL NO SELF TEST
	JMP PWRON	;TRY AGAIN
	
STEST0:	LDA I,0
	STA NOISE		;TURN OFF CRASH
	STA A,LITE1+1		;TURN ON LIGHTS
	STA A,LITE2+1
	STA A,SVLIT1
	STA A,SVLIT2
	LDA I,0E4		;SET-UP POINTERS
	STA TEMP2
	LDA I,04
	STA TEMP2+1		;SAVE ADDRESS FOR GOOD ROM #
	LDA I,PROG&0FF00/100
	STA TEMP4+1		;FWA OF ROM TO BE CHECKSUMED
	LDX I,0
5$:	LDA I,4
	STA TEMP1		;SAVE NUMBER OF PAGES PER CHECKSUM
	LDA I,0
	STA TEMP4		;CLEAR LOWER HALF OF R0M POINTER
	TAY
	LDA I,55
6$:	EOR NY,TEMP4		;BUILD CHECKSUM
	INY
	BNE 6$
	STA A,WTCHDG		;PULSE WATCHDOG
	INC TEMP4+1
	DEC TEMP1
	BNE 6$
	CMP AX,CKSUM		;CHECKSUM OK?
	BEQ 7$			;YES
	EOR AX,CKSUM
	STA TEMP3
	LSR
	LSR
	LSR
	LSR
	JSR HEX1		;DISPLAY DIFFERENCE IN CHECKSUM
	DEC TEMP2
	STA NY,TEMP2
	LDA TEMP3
	JSR HEX1
	LDY I,20
	STA NY,TEMP2
	LDY I,0
	INC TEMP2
	LDA I,92		;DISPLAY ROM
	STA A,464
	LDA I,8F
	STA A,484
	LDA I,8D
	STA A,4A4
	TXA			;BAD ROM CHECKSUM
	ORA I,0B0		;OUTPUT ROM # AND A BLANK
	STA NY,TEMP2
	LDA TEMP2
	CLC
	ADC I,60
	STA TEMP2
	BCC 7$
	INC TEMP2+1
7$:	INX
	CPX I,5			;NUMBER OF PROMS
	BNE 5$
	LDA TEMP2+1
	CMP I,04		;IF ROM IS BAD
	BNE 8$
	LDA TEMP2
	CMP I,0E4
	BEQ 10$			;IF NO BAD R0MS
8$:	LDA I,82		;OUTPUT BAD
	STA NY,TEMP2
	LDY I,20
	LDA I,81
	STA NY,TEMP2
	LDY I,40
	LDA I,84
	STA NY,TEMP2
10$:	LDA I,0
	STA TEMP3		;FLAG NOISE/VALUME TEST
	LDA A,SLAM		;SAVE CURRENT SWITCH SETTINGS
	STA TEMP1
	LDA A,SVSW1
	ROL
	LDA A,SVSW2
	ROR
	STA TEMP1+1
	LDA A,PLSW
	STA TEMP2
	LDA A,GAMESW
	STA TEMP2+1
	LDA A,COINS
	STA TEMP3+1
STEST1: LDA A,VSYNC
	CMP I,0FA		;WAIT FOR RAMP TO SETTLE DOWN
	BCS STEST1		;WAIT FOR END OF VBLANK
5$:	LDA A,VSYNC
	CMP I,0FA		;WAIT FOR VBLANK TO COMPLETE
	BCC 5$
	LDA FRAME
	LSR
	BCC 8$			;MUST BE PLAYER 2 TIME
	LDA PADDLE+1		;SAVE PADDLE VALUE FOR PLAYER 2
	STA TEMP4+1
	STA A,MASK1+1		;START PLAYER 1
	BCS 10$			;ALWAYS

8$:	LDA PADDLE+1		;SAVE PADDLE VALUE FOR PLAYER 1
	STA TEMP4
	STA A,MASK2+1		;START PLAYER 2
10$:	INC FRAME		;INCREMENT FRAME #
	STA A,WTCHDG		;PULSE WATCHDOG
	LDA TEMP4
	JSR HEX1		;CONVERT TO HEX DIGIT
	STA A,5C0		;DISPLAY DIGIT
	LDA TEMP4
	LSR
	LSR
	LSR
	LSR
	JSR HEX1		;CONVERT DIGIT
	STA A,5A0		;DISPLAY IT ON PLAYER 1 SIDE
	LDA TEMP4+1		;DISPLAY PLAYER 2 POT VALUE
	JSR HEX1		;CONVERT DIGIT
	STA A,5DF		;PUT IT ON PLAYER 2'S SIDE
	LDA TEMP4+1
	LSR
	LSR
	LSR
	LSR
	JSR HEX1		;CONVERT DIGIT
	STA A,5BF
	LDX NOISE
	LDA TEMP3
	BNE 24$			;A SWITCH HAS BEEN SET
	LDA FRAME
	AND I,1F
	BNE 26$			;DON'T CHANGE TONES YET
	TXA
	ASL
	AND I,0F
	BNE 20$			;IF NOISE NO CYCLED AROUND
	LDA I,01
20$:	TAX			;CHANGE NOISE
	BNE 26$
	
24$:	LDA FRAME
	AND I,01
	BNE 36$			;DON'T CHANGE NOISE YET
	TAX			;STOP THE NOISE
26$:	LDA A,SLAM
	EOR TEMP1
	AND I,40
	BEQ 28$			;NO SLAM SWITCH
	LDX I,81
28$:	LDA A,SVSW1
	ROL
	LDA A,SVSW2
	ROR
	EOR TEMP1+1
	AND I,0C0
	BEQ 30$			;NO SERVE CHANGE
	LDX I,82
30$:	LDA A,PLSW
	EOR TEMP2
	AND I,0C0
	BEQ 32$			;NO PLAYER START CHANGE
	LDX I,84
32$:	LDA A,GAMESW
	EOR TEMP2+1
	AND I,80
	BEQ 34$			;NO CHANGE IN GAME SELECT SWITCH
	LDX I,84
34$:	LDA A,COINS
	EOR TEMP3+1
	AND I,0C0
	BEQ 35$			;NO CHANGE IN COINS
	LDX I,88
35$:	STX NOISE
	TXA
	BPL 36$
	STA TEMP3		;FLAG STOP OF TONE TEST
36$:	BIT A,STSW		;STILL IN SELF-TEST?
	BMI 77$			;NO SELF TEST
	JMP STEST1
	
77$:	JMP PWRON
	
CKSUM:	.BYTE 0C3,13,0A0,1A,0AA,7A
	
;HEX1-CONVERT HEX DIGIT FOR PLAYER 1
;
;NOTE - THIS ROUTINE IS USED BY THE SELF-TEST DIAGNOSTIC ROUTINE
;	AND SHOULD RESIDE IN THE UPPER 1K.
;
;ENTRY (A)=LOWER 4 BITS TO BE CONVERTED
;EXIT (A)=HEX DIGIT TO BE DISPLAYED (WHILE ON BLACKS)
HEX1:	AND I,0F
	ORA I,0B0
	CMP I,0BA
	BCC 1$		;IF 0 TO 9
	SBC I,39	;CHANGE BA-BF TO 81-86
1$:	RTS


;HEX2-CONVERT HEX DIGIT FOR PLAYER 2
;
;
;ENTRY	(A)=LOWER 4 BITS TO BE CONVERTED
;EXIT	(A)=HEX DIGIT TO BE DISPLAYED (WHITE ON BLACK)
;
HEX2:	AND I,0F
	CLC
	ADC I,97		;97-A0 FOR 0 TO 9
	CMP I,0A1
	BCC 1$			;IF 0 TO 9
	SBC I,20		;CHANGE TO 81-86
1$:	RTS


	.REPT PROG+13FA-.	;ZERO REMAINING BYTES
	.BYTE 0
	.ENDM
	.=PROG+13FA
	.WORD NMI,PWRON,IRQ
	.=0F7C3
	.WORD NMI		;DEVELOPMENT SYSTEM NMI ADDRESS
	.=0F7C8
	.WORD IRQ		;DEVELOPMENT SYSTEM IRQ ADDRESS
	.END

                                                                                                                                                                                                                                                         